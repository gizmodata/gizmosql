name: Test

on:
  push:
    branches: [ main, feat/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install adbc-driver-flightsql pyarrow pytest pytest-timeout
    
    - name: Build GizmoSQL
      run: |
        # Install build dependencies
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libboost-all-dev
        
        # Configure and build
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
        cmake --build build --target gizmosql_server gizmosql_client -j$(nproc)
        
        # Check binaries were built
        ls -la build/gizmosql_*
    
    - name: Create test database
      run: |
        pip install duckdb
        python scripts/create_duckdb_database_file.py \
          --file-name="test.duckdb" \
          --file-path="data" \
          --overwrite-file=true \
          --scale-factor=0.01
    
    - name: Start GizmoSQL server
      run: |
        export GIZMOSQL_PASSWORD="test123"
        ./build/gizmosql_server --database-filename data/test.duckdb --port 31337 &
        sleep 5  # Give server time to start
        
        # Verify server is running
        ps aux | grep gizmosql_server
    
    - name: Test basic connectivity
      run: |
        ./build/gizmosql_client \
          --command Execute \
          --host localhost \
          --port 31337 \
          --username gizmosql_username \
          --password test123 \
          --query "SELECT version()"
    
    - name: Test PIVOT query
      run: |
        ./build/gizmosql_client \
          --command Execute \
          --host localhost \
          --port 31337 \
          --username gizmosql_username \
          --password test123 \
          --query "PIVOT (SELECT n_name as category, n_regionkey as league, n_nationkey as amount FROM nation) ON league USING sum(amount) GROUP BY category"
    
    - name: Test catalog header functionality
      run: |
        # First create an additional catalog with test data
        ./build/gizmosql_client \
          --command Execute \
          --host localhost \
          --port 31337 \
          --username gizmosql_username \
          --password test123 \
          --query "ATTACH ':memory:' AS superduck"
        
        ./build/gizmosql_client \
          --command Execute \
          --host localhost \
          --port 31337 \
          --username gizmosql_username \
          --password test123 \
          --query "CREATE TABLE superduck.movies (id INT, title VARCHAR, year INT)"
        
        ./build/gizmosql_client \
          --command Execute \
          --host localhost \
          --port 31337 \
          --username gizmosql_username \
          --password test123 \
          --query "INSERT INTO superduck.movies VALUES (1, 'The Matrix', 1999), (2, 'Inception', 2010), (3, 'Interstellar', 2014)"
        
        cat > test_catalog.py << 'EOF'
        from adbc_driver_flightsql import dbapi as flightsql, DatabaseOptions
        
        username = "gizmosql_username"
        password = "test123"
        
        print("\nTest 1: Default connection (no header)")
        print("-" * 40)
        conn = flightsql.connect(
            uri="grpc://localhost:31337",
            db_kwargs={
                "username": username,
                "password": password,
            },
        )
        
        with conn.cursor() as cur:
            cur.execute("SELECT current_database()")
            result = cur.fetchone()
            print(f"Current database: {result[0]}")
            assert result[0] == "test", f"Expected default database 'test', got {result[0]}"
        
        conn.close()
        
        print("\nTest 2: With x-default-catalog header")
        print("-" * 40)
        try:
            conn = flightsql.connect(
                uri="grpc://localhost:31337",
                db_kwargs={
                    "username": username,
                    "password": password,
                    DatabaseOptions.WITH_COOKIE_MIDDLEWARE.value: "true",
                    # Set default catalog via custom header
                    f"{DatabaseOptions.RPC_CALL_HEADER_PREFIX.value}x-default-catalog": "superduck",
                }
            )
            
            with conn.cursor() as cur:
                # Check current database
                cur.execute("SELECT current_database()")
                result = cur.fetchone()
                print(f"Current database: {result[0]}")
                
                if result[0] == 'superduck':
                    print("✓ Default catalog was set correctly!")
                
                # Now try unqualified query - this should work!
                try:
                    cur.execute("SELECT COUNT(*) FROM movies")
                    result = cur.fetchone()
                    print(f"✓ SUCCESS! Unqualified query works! Count: {result[0]}")
                    assert result[0] == 3, f"Expected 3 movies, got {result[0]}"
                    
                    # Try a more complex query
                    cur.execute("""
                        SELECT *
                        FROM movies
                        ORDER BY year DESC
                        LIMIT 10
                    """)
                    results = cur.fetchall()
                    print(f"✓ Complex query also works! Got {len(results)} rows")
                    assert len(results) == 3, f"Expected 3 rows, got {len(results)}"
                    
                except Exception as e:
                    print(f"✗ Query failed: {str(e)[:200]}")
                    print("\nThis might mean the server hasn't been rebuilt with the changes yet.")
                    raise
            
            conn.close()
            print("\n✓ Custom header approach works perfectly!")
            
        except Exception as e:
            print(f"Error: {str(e)[:200]}")
            raise
        
        print("\n✅ All catalog header tests passed!")
        EOF
        
        python test_catalog.py
    
    - name: Test prepared statements
      run: |
        cat > test_prepared.py << 'EOF'
        from adbc_driver_flightsql import dbapi as flightsql
        
        conn = flightsql.connect(
            uri="grpc://localhost:31337",
            db_kwargs={
                "username": "gizmosql_username",
                "password": "test123",
            },
        )
        
        with conn.cursor() as cur:
            # Test prepared statement with parameters
            cur.execute("SELECT * FROM nation WHERE n_nationkey = ?", [1])
            result = cur.fetchall()
            print(f"Nation with key 1: {result}")
            assert len(result) == 1, "Should find exactly one nation"
            
            # Test multiple executions
            for key in [0, 1, 2]:
                cur.execute("SELECT n_name FROM nation WHERE n_nationkey = ?", [key])
                name = cur.fetchone()[0]
                print(f"Nation {key}: {name}")
        
        conn.close()
        print("✅ Prepared statement test passed!")
        EOF
        
        python test_prepared.py
    
    - name: Kill server
      if: always()
      run: |
        pkill gizmosql_server || true